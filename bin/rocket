#! /usr/bin/env node
var
  program = require('commander'),
  packageInfo = require('../package.json');

var handlers = require('../lib/handler/Handler');
var util = require('../lib/util');

program
  .command('init')
  .description('Init config file')
  .option('-o, --overwrite [value]', 'Overwrite old config files')
  .action(function (options) {
    handlers.handleInit(options)
      .then(function (res) {
        util.logSuccess('Init succeed! \n' + res);
      })
      .catch(function (err) {
        util.logError('Init failed! \n' + err.toString());
        process.exit(1);
      });
  });


program
  .command('config [show]')
  .description('Config Qiniu bucket, domain, access key and secret key')
  .option('-b, --bucket <value>', 'Qiniu Bucket')
  .option('-a, --accessKey <value>', 'Qiniu AccessKey')
  .option('-s, --secretKey <value>', 'Qiniu SecretKey')
  .option('-d, --domain <value>', 'Qiniu domain')
  .action(function (show, options) {
    handlers.handleConfig(show, options)
      .then(function (res) {
        util.logSuccess(res);
      })
      .catch(function (ex) {
        util.logError(ex);
        process.exit(1);
      });
  });

program
  .command('add')
  .description('Add dir or files to index')
  .option('-d, --dir [value]', 'dir, default current dir')
  .option('-r, --recursive [value]', 'recursive dirs, default no recursive')
  .option('-f, --filter [value]', 'regex filter, default all files of dir')
  .action(function (options) {
    handlers.handleAdd(options)
      .then(function (res) {
        util.logSuccess(res);
      })
      .catch(function (ex) {
        util.logError('Add file(s) failed! \n' + ex);
      });
  });

program
  .command('push')
  .description('Push files to Qiniu cloud')
  .option('-m, --maxWorkers [value]', 'max concurent upload workers, default 5')
  .action(function (options) {
    handlers.handlePush(options)
      .then(function (res) {
        util.logSuccess(res);
      })
      .catch(function (ex) {
        util.logError(ex);
        process.exit(1);
      });
  });

program
  .command('ls')
  .description('List files from local index')
  .option('-o, --offset [value]', 'offset, default 0')
  .option('-l, --limit [value]', 'limit, default all data long')
  .action(function (options) {
    handlers.handleLs(options)
      .then(function (res) {
        util.logSuccess(res);
      })
      .catch(function (ex) {
        util.logError('List file(s) failed! \n' + ex);
        process.exit(1);
      });
  });

program
  .command('pull <key>')
  .description('Pull file from Qiniu cloud')
  .option('-d, --dest [value]', 'destination dir, default value: uploaded dir')
  .action(function (key, options) {
    handlers.handlePull(key, options)
      .then(function (res) {
        util.logSuccess(res);
      })
      .catch(function (ex) {
        util.logError('Pull file(s) from cloud failed! \n' + ex);
      });
  });

program
  .version(packageInfo.version)
  .parse(process.argv);

